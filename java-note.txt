1 注解
	1.1 注解的作用
		a. 生成文档
		b. 跟踪代码依赖性，实现替代配置文件的功能。
		c. 在编译时进行格式检查
	1.2 元注解
		1.2.1 @Target: 说明Annotation所修饰的范围（即被描述的注解可以使用在什么地方）
			a. CONTRUCTOR
			b. FIFLD
			c. LOCAL_VARIABLE
			d. METHOD
			f. PACKAGE
			g. PARAMETER
			7. TYPE: 用于描述类、接口或enum声明
		1.2.2 @Retention 定义该Annotation被保留时间的长短（即需要在什么级别保存盖注释信息，用于描述注解的生命周期）
			a. SOURCE: 在编译阶段丢弃
			b. CLASS: 在类加载的时候丢弃
			c. RUNTIME: (RetentionPolicy的常量，始终不会丢弃,RUNTIME级别注解处理器可以通过反射，获取该注解的属性值）
		1.2.3 @Inherited 标记注解,是否允许子类继承该注解
		1.2.4 @Document 注解是否将包含于JavaDoc中
	1.3 自定义注解
		1.3.1 使用@interface自定义注解，自动继承了java.lang.annotation.Annotation接口，其中的每一个方法实际上是声明了一个配置参数，方法的名称就是参数的名称，返回值类型就是参数的类型，可以通过defalut来声明参数的默认值
		1.3.2 注解参数的可支持数据类型
			a. 所有基本数据类型
			b. String
			c. Class
			d. ennum
			e. Annotation
			f. 以上所有类型的数组
		1.3.3 Annotation类型里面的返回值设定（参数设定）
			a. 只能用public或默认这两个访问修饰符
			b. 参数成员只能使用1.2.2的参数类型
			c. 如果只有一个参数成员，最好把参数名称（方法名）设为"value"

Http 详解
1. TCP/IP
	IP ：负责在因特网上发送和接受数据包（只检查关键的头数据），计算机之间的通信；TCP：确保数据包以正确的次序到达，并且尝试确认数据包的内容没有改变，负责在数据传送之前将其分割并装入IP包，并在其到达目的后重组，应用程序之间的通信；TCP负责应用软件和网络软件的通信，IP负责计算机之间的通信。HTTP up to TCP up to IP
2. HTTP请求响应模型
	http是一个无状态协议（不需要建立持久连接），服务端不保留连接的有关信息
3. HTTP工作过程
	一次HTTP操作称为一个事务，过程如下：
	3.1 地址解析
		如 http://www.baidu.com:8080/index 需要域名系统DNS解析域名www.baidu.com,得到主机的IP地址。
	3.2 封装HTTP请求数据包
		把以上信息结合本机的信息，封装成一个HTTP请求数据包
	3.3 封装成TCP包，建立TCP连接（TCP的三次握手）
	3.4 客户机发送请求命令：其格式为：统一资源标识符（URL），协议版本号，MIME信息（请求修饰符、客户机信息和可能的内容）等内容
	3.5 服务器响应
		服务器接受到请求后，给予相应的响应信息，其格式为：一个状态行（包括信息的协议版本号），一个成功或错误的标识，后面是MIME信息（包括服务器信息，实体信息等），服务器发送完头信息后，会发送一个空白行表示头信息发送结束，接着就以Content-type应答头信息所描述的格式发送用户请求的实际数据
	3.6 服务器关闭TCP连接
		如果浏览器或者服务器在其头信息加入Connection:alive,则TCP连接在其发送完信息后仍保持连接，浏览器可以继续通过相同的连接发送请求。
4. HTTP请求的三个部分（请求行，消息报头，请求正文）
	4.1 请求行
		请求行以一个方法符号开头，以空格分开，后面跟着请求的URL和协议的版本，格式如下：Method Request-URI HTTP-Version CRLF
5. 客户机发起一次请求：客户机将请求封装成http数据包->封装成TCP数据包->封装成IP数据包->封装成数据帧->硬件将数据帧转换成bit流->最后通过物理硬件（网卡芯片）发送到指定地点
6. HTTP各种长度限制
	6.1 URL长度
		a. 服务器的限制：通过控制http的请求头的长度来进行限制，如nginx的large_client_header_buffers,tomcat的maxHttpHeaderSize
		b. 浏览器的限制：以字符位单位，IE-2803；FireFox-65536；Chrome-8182；Safari-80000；Opera-190000
	6.2 POST数据的长度限制
		a. 通过服务器端配置最大http请求头长度的方式实现
	6.3 Cookie长度限制
		a. 浏览器所允许的每个域下的最大cookie数目
		b. 浏览器所允许的每个Cooike的最大长度
		c. 服务器中HTTP请求头长度的限制	
7. 会话方式
	7.1 HTTP/1.0
		建立连接->请求->响应->断开连接；每次连接只处理一次请求和响应，对资源的每次访问都需要建立一个单独的连接；浏览器到服务器的每次通讯都是完全分开的；没有Host域，所以不能创建基于主机头的虚拟主机
	7.2 HTTP/1.1
		在一个TCP连接中可以传送多HTTP请求和响应；不需要等待上次HTTP响应完毕，可以多可以多个HTTP请求同时进行，服务器会根据浏览器的发送请求顺序来按顺序进行响应，即管线；有Host域，可以建立虚拟主机
8. 请求消息
	结构：状态行+若干消息头（可选）+CRLF+实体内容（可选）
9. 响应消息
	对于HTTP/1.1,如果消息中包括实体内容，且没有采用Transfer-Encoding:chunked传输编码方式，则必须有Content-Length消息头，否则浏览器和服务器都不知道合适消息结束
10. HTTP消息头概述
	a. 浏览器通过消息头告诉服务器浏览器的国家语言版本，从哪个页面访问到当前页面等
	b. 服务器通过消息头告诉浏览器多长时间刷新一次，用哪种字符显示内容，创建cookie等
	c. 结构：头字段名称（不区分大小写）:_值，值，值（CRLF） 头字段名称（不区分大小写）:_值，值，值（CRLF）(任意顺序排列）
	d. 分类：通用信息头，请求头，响应头，实体头
11. 请求行
	a. 结构：请求方式_资源路径_HTTP版本号（CRLF）如：GET /index.htm HTTP/1.1
	b. 请求方式
		1. GET：请求获取Request-URI所标识的资源
		2. POST：在Request-URI所标识的资源后添加新数据
		3. HEAD：请求Request-URI所标识的资源的响应消息抱头
		4. PUT：请求服务器存储一个资源，并用Request-URI作为资源标识
		5. DELETE：请求服务器删除Request-URI所标识的资源
		6. TRACE：请求服务器会送收到的请求信息，主要用于测试个诊断
		7. CONNECT：保留
		8. OPTION：请求查询服务器的性能，或者查询与资源相关的选项和需求
12. 状态行
	a. 结构：HTTP版本号_状态码_状态描述（CRLF）如：HTTP/1.1 200 OK
13. 使用GET或POST传递参数
	a. GET用URL传递参数，如GET /List?Catagoryid=5&cityid=12 HTTP/1.1
	b. POST使用实体内容传递参数，如POST /List HTTP/1.1 CRLF Content-Type:application/x-www-form-urlencoded CRLF Content-Length:22 CLRF <space line> Catagoryid=5&cityid=12
	c. 当Content-Length长度比实体内容长度短时，忽略多出部分内容；当Content-Lenght少于实体长度，则会继续等待
14. 响应状态码
	a. 1xx：指示信息--表示请求已接收，继续处理
	b. 2xx：成功--表示请求	已被成功的接收，理解，接受
	c. 3xx：重定向--要完成请求必须更进一步操作
	d. 4xx：客户端错误提示--请求有语法错误或请求无法实现
	e. 5xx：服务端错误--服务器未能实现合法的请求
	f. 常见状态码
		1. 200 OK 客户端请求成功
		2. 206 - 客户端发送了带有Range头的GET请求，服务器正确的返回了该范围的数据
		3. 302/307 - 指出被请求的文档已经临时移动到别处，此文档的新的URL在Location响应头中给出
		4. 304 - 客户机缓存的版本是最新的，客户端应该继续使用它
		5. 400 Bad Request 客户端请求有语法错误，不被服务器理解
		6. 401 Unauthorized 表示客户端访问的是一个受口令和密码保护的页面，并且在WWW-Authenticate响应头提示客户机应重新发出一个带有Authorization头的请求信息
		7. 403 Forbidden 服务器接到请求，但是拒绝提供服务
		8. 404 Not Found 请求的资源不存在
		9. 500 Internal Server Error 服务器的CGI，ASP，JSP发送错误
		10. 503 Server Unavaliable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常
15. 通用头信息
	15.1 Cache-Control:no-cache
		a. 用于客户机发送请求时，通知代理服务器如何处理缓存；如果设置为no-cache，则代理服务器必须去服务器验证资源，以确保发送给客户端的文档是最新的
		b. 用于响应信息中，则通知客户机及代理服务器如何缓存当前的响应信息，网页计算器等响应消息中使用no-cache
	15.2 Connection:close/Connection:Keep-Alive
		a. 用于指定处理完本次请求和响应后，客户端和服务器是否需要继续保持连接
		b. HTTP/1.1默认为Connection:Alive
	15.3 Date:Tue,11 Jul 2000 18:18:18 GMT
		a. 用于表示HTTP消息产生的时间，服务器返回的正常响应信息中总是包含Date头
	15.4 Program:no-cache
		值只能为no-cache，在HTTP/1.0中，指示客户端不要缓存当前的响应信息
	15.5 Trailer:Date
		用于指示在实体内容的后面可以出现哪些字段，指示哪些消息头放在实体内容后面传输
	15.6 Transfer-Encoding:chunked
		

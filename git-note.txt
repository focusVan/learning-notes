GitÑ§Ï°±Ê¼Ç
1.Git Basic
	1.1 Getting a Git Repository
		1.1.1 Getting a Git Repository
			a. inti repository£º cd E:/focus/my_repository ->git init
			b. first commit£º git add FILES -> git add LICENSE -> git commit -m DESCRIPTION
		1.1.2 Cloning an Existing Repository
			a. git clone: Git receives a full copy of nearly all data that the server has, Every version of every file for the history of the project is pulled down by default when you run git clone
			b. git clone URL or git clone user@server:path/to/repo.git(useing SSH transfer protocal)
	1.2 Recording Chages to the Repository
		1.2.1 Recording Changes to the Repository
			a. two states: tracked or untracked. Tracked files:files that were in the last snapshot,can be unmodified,modified or staged. Untracked files: everything else(not int your last snapshot and not in your staging area)
			b. flows: Untracked file --(add the file) -> Staged. Unmodified --(edit the file)-> Modified --(stage the file)->Staged. Staged--(commit)->Unmodified--(remove the file)->Untracked.
		1.2.2 Checking the Status of Your Files
			a. git status: list the branch and other message
		1.2.3 Tracking New Files
			a. git add: To begin tracking a new file or to stage files or to mark merge-conflicted files as resolved (add this content to the next commit)
		1.2.4 Staging Modified Files
			a. git add ModifiedFileName (notice: If you modify a file after you run git add, you have to run git add again to stage the latest version of the file)
		1.2.5 Short Status
			a. git status -s:(??->new files not be tracked;A->new files have been added to the staging area;M->modified files)
			b. two columns to indicate the status: left-hand indicates the status of the staging area, right-hand indicates the status of the working tree.
		1.2.6 Ignoring Files
			a. .gitignore: simplified regular expressions that shells use
		1.2.7 Viewing Your Staged and Unstaged Changes
			a. git diff: To see what you have changed but not yet staged,type git diff with no other arguments.
			b. To see what you have staged that will go into next commit: git diff -staged. this command compares your staged changes to your last commit.
		1.2.8 Committing Your Changes
			a. git commit -m MESSAGE
			b. git commit -v diff
		1.2.9 Skipping the Staging Area
			a. git commit -a (Making Git automatically stage every file that is already tracked before doing the commit)
		1.2.10 Removing Files
			a. git rm FILE: To remove a file from Git and all remove it from woking directory(remove it from staging area and than commit),not be listed in git status
			b. rm FILE: remove file from working directory(still be listed in git status)
			c. git rm --cached FILE: Remove file from Git but keep it in working tree.
			d. git rm patterns: remove files that matchs
		1.2.11 Moving Files
			a. git mv OLD NEW
	1.3 Viewing the Commit History
		1.3.1 Viewing the Commit History
		
	
	
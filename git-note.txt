Git Notes
1 Git Basic
	1.1 Getting a Git Repository
		1.1.1 Getting a Git Repository
			a. inti repository： cd E:/focus/my_repository ->git init
			b. first commit： git add FILES -> git add LICENSE -> git commit -m DESCRIPTION
		1.1.2 Cloning an Existing Repository
			a. git clone: Git receives a full copy of nearly all data that the server has, Every version of every file for the history of the project is pulled down by default when you run git clone
			b. git clone URL or git clone user@server:path/to/repo.git(useing SSH transfer protocal)
	1.2 Recording Chages to the Repository
		1.2.1 Recording Changes to the Repository
			a. two states: tracked or untracked. Tracked files:files that were in the last snapshot,can be unmodified,modified or staged. Untracked files: everything else(not int your last snapshot and not in your staging area)
			b. flows: Untracked file --(add the file) -> Staged. Unmodified --(edit the file)-> Modified --(stage the file)->Staged. Staged--(commit)->Unmodified--(remove the file)->Untracked.
		1.2.2 Checking the Status of Your Files
			a. git status: list the branch and other message
		1.2.3 Tracking New Files
			a. git add: To begin tracking a new file or to stage files or to mark merge-conflicted files as resolved (add this content to the next commit)
		1.2.4 Staging Modified Files
			a. git add ModifiedFileName (notice: If you modify a file after you run git add, you have to run git add again to stage the latest version of the file)
		1.2.5 Short Status
			a. git status -s:?->new files not be tracked;A->new files have been added to the staging area;M->modified files)
			b. two columns to indicate the status: left-hand indicates the status of the staging area, right-hand indicates the status of the working tree.
		1.2.6 Ignoring Files
			a. .gitignore: simplified regular expressions that shells use
		1.2.7 Viewing Your Staged and Unstaged Changes
			a. git diff: To see what you have changed but not yet staged,type git diff with no other arguments.
			b. To see what you have staged that will go into next commit: git diff -staged. this command compares your staged changes to your last commit.
		1.2.8 Committing Your Changes
			a. git commit -m MESSAGE
			b. git commit -v diff
		1.2.9 Skipping the Staging Area
			a. git commit -a (Making Git automatically stage every file that is already tracked before doing the commit)
		1.2.10 Removing Files
			a. git rm FILE: To remove a file from Git and all remove it from woking directory(remove it from staging area and than commit),not be listed in git status
			b. rm FILE: remove file from working directory(still be listed in git status)
			c. git rm --cached FILE: Remove file from Git but keep it in working tree.
			d. git rm patterns: remove files that matchs
		1.2.11 Moving Files
			a. git mv OLD NEW
	1.3 Viewing the Commit History
		1.3.1 Viewing the Commit History
			a. git log By defalut,with no arguments,it lists the commits made in repository in reverse chronological order
			b. git log -p: which shows the difference introduced in each commit. -2 which limits the output to only the last two entries
			c. git log --stat: To see some abbreviated stats for each commit
			d. git log --pretty=oneline, --pretty=short, --pretty=full, --pretty=fuller, --pretty=format:"%h - %an, %ar : %s"
			e. git log --graph: a nice little ASCII graph
		1.3.2 Limiting Log Output
			a. git log --since=1.days(--since="2017-04-26",--since="1 years 2 weeks 3 minutes ago")
			b. git log --author(--grep: grep from commit messages)
			c. git log -S STRING (find the last commit that added or removed the STRING)
	1.4 Undoing Things
		1.4.1 Undoing Things
			a. git commit -amend: This command will commit files that you forgot and use the same snapshot with the last commit
		1.4.2 Unstaging a Staged File
			a. git reset HEAD FILE This command will unstage a staged file
		1.4.5 Unmodedifying a Modefied: File
			a. git checkout -- FILE: This command revert changes
	1.5 Working with Remotes
		1.5.1 Showing your Remotes
			a. git remote: your can see at least origin-that is the default name Git gives to the server you cloned from
			b. git remote -v: showing the URLs that Git has stored for the shortname to be used when reading and writing to that remote
		1.5.2 Adding Remote Repositories
			a. git remote add <shorname> <url>: To add a new remote Git repository
		1.5.3 Fetching and Pulling from Remotes
			a. git fetch <url/remote-name>  Get data from remote(you should have a repository local first)
			b. git fetch origin: To fetch any new work that has been pushed to that server since you cloned(or last fetched from),it only downloads the data and do not merge it with any of your work and modify what you are currently working on.
			c. git pull origin: to automatically fetch and then merge that into your currently working on. 
		1.5.4 Pushing to Remotes
			a. git push [remote-name] [branch-name]: To push your branch to your remote server
		1.5.5 Inspecting a Remote
			a. git remote show [remote-name]: This command shows the configurations of command git pull and git push and other messages
		1.5.6 Removing and Renaming Remotes
			a. git remote rename <remote-name> <new-name>
			b. git remote remove <remote-name>
	1.6 Tagging
		1.6.1 Listing your Tags
			a. git tag: This command lists tags in alphabetical order
			b. git tag -l <pattern>: To search tags with particular pattern
		1.6.2 Creating Tags
			a. two main types of tags: lightweight(just a pointer a specific commit) and annotated
		1.6.3 Annotated Tags
			a. git tag -a <version> -m <annotation>: add a annotated tag
			b. git show <version>: to show tagger infomation
		1.6.4 Lightwight Tags
			a. git tag <version>: add a lightweight tag
		1.6.5 Tagging Later
			a. git tag -a <version> checksum
		1.6.6 Sharing Tags
			a. git push origin <tagname>
		1.6.7 Checking out Tags
			a. git checkout -b <branchname> <tagname>
	1.7 Git Aliases
		1.7.1 Git Aliases
			a. git config --global alias.<short> <full>
2 Git Branching
	2.1 Branches in a Nutshell
		2.1.1 Branches in a Nutshell
			a. it creates a snapshot when you commit. the snapshot contains a pointer to parents(when it has),a pointer to files summary and other messages. the summary contains pointers that points every file which has been changed.
			b. branchs like master,branch just a pointer that points some snapshot.
		2.1.2 Creating a New Branch
			a. git branch <branchname>: This command creates a new pointer to the same commit you are currently on.Git keeps a special pointer called HEAD to the local branch you are currently on.git branch command only created a new branch - it did not switch to it
		2.1.3 Switching Branches
			a. git checkout <branchname>: switch branch
			b. git log --oneline --decorate --graph --all
	2.2 Basic Branching and Merging
		2.2.1 Basic Braching
			a. git merge <branchname>: merge branch
			b. fast-forward merge: merge one commit with a commit that can be reached by following the first commit's history.
			c. git branch -d <branchname>: delete branch locally.
		2.2.2 Basic Merging
			a. three-way merge: using the two snapshots pointed to by the branch tips and the common ancestor of the two.Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it. This is referred to as a merge commit, and is special in that it has more than one parent.
		2.2.3 Basic Merge Conflict
			a. If you changed the same part of the same file differently in the two branches.there should be conflicted
			b. git mergetool: which fires up an appropriate visual merge tool and walks you through the conflicts
	2.3 Branch Management
		2.3.1 Branch Management
			a. git branch -v: To see the last commit on each branch
			b. git branch --merged/git branch --no-merged
	2.4 Branching Workflows
		2.4.1 Long-Running Branches： maintain a statable branch and a develop branch, when the develop branch ready,merge it into main branch.
		2.4.2 Topic Branches: Try to solove progrem with more than one branches and merge one of the best into main branch and give up others.
	2.5 Remote Branches
		2.5.1 Remote Branches
			a. git remote show [remote]: list remote references explictly.
			b. git fetch [remote]: to synchronize your work
			c. git remote add: to add a server as a new remote reference to the project you are currently working on.
		2.5.2 Pushing
			a. git push <remote> <branch>/git push <remote> <localbranch>:<remtebranch>
			b. git merge origin/<remotebranch>
		2.5.3 Tracking Branches
			a. The branch it tracked is called "upstream branch",it have a direct relationship to a remote branch.
			b. git checkout -b [branch] [remote][branch]: to track a remote branch
			c. git checkout -u [remote]/[branch]
			d. git branch -vv: to see tracking branches you have set up.
			e. git fetch ==all: up to date ahead and behind numbers
		2.5.4 Pulling
			a. git pull: a command essentially git fetch immediately followed by a git merge
		2.5.5 Deleting Remote Branches
			a. git push [remote] --delete ] [branch]: to remove remote branch
	2.6 Rebasing
		2.6.1 The Basic Rebase
			a. git checkout branchone->git rebase branchtwo: to take all the changes that were commited on branch one and replay them on branch two
			b. git rebase --onto master server client: to take the client branch,figure out the patches since that it diverged from the server branch,and replay this patches inthe client branch as if it was based directly off the master branch instead.
		2.6.2 The Perils of Rebasing
			a. Do not rebase commits that exist outside your repository
		2.6.3 Rebase When Your Rebase
			a. git pull -> git rebase [server]/master
			b. git pull --rebase
			c. if you rebase commits that have never been available publicly,then you'll be fine.
	2.7 Rebase VS Merge
		2.7.1 Commit history is a record of what actually happened
		2.7.2 Commit history is the story of how your project was made.
		2.7.3 Rebase local changes you've made but haven't yet 	shared and never rebase anything you've pushed somewhere.
3 Git on the server
	3.1 The Protocals
		3.1.1 Local Protocal
			a. git clone /focus/learning-note.git or git clone file:///focus/learning-note.git
			b. git remote add local_proj /focus/project.git
		3.1.2 The HTTP Protocals
			a. Smart HTTP: tip you to entry name and password
			b. Dump HTTP: 
		3.1.3 The SSH Protocal
			a. git clone ssh://user@server/project.git or git clone user@user@server/project.git
		3.1.4 The Git Protocal
	3.2 Getting Git on a Server
		3.2.1 Create a new bare repository
			a. git clone --bare my_project my_project.git
		3.2.2 Putting the Bare Respository on a Server
			a. scp -r my_project.git user@git.com:/srv/git
			b. git clone user@git.com:/srv/git/my_project.git
			c. git init --bare --shared: Git will automatically add group write permissions to a repository properly
			d. To collaborate with a couple of people on a private project, all you need is an SSH server and a bare repository
		3.2.3 Small Setups
			a. Add users and set temporary passwords for every one
			b. create a single git user on the mechine and ask every user who is to have write access to send you an SSH public key and add that key to the ~/.ssh/authorized_keys file of your new git user.	3.2.1 Create a new bare repository
				a. git clone --bare my_project my_project.git
			3.2.2 Putting the Bare Respository on a Server
				a. scp -r my_project.git user@git.com:/srv/git
				b. git clone user@git.com:/srv/git/my_project.git
				c. git init --bare --shared: Git will automatically add group write permissions to a repository properly
				d. To collaborate with a couple of people on a private project, all you need is an SSH server and a bare repository
			3.2.3 Small Setups
				a. Add users and set temporary passwords for every one
				b. create a single git user on the mechine and ask every user who is to have write access to send you an SSH public key and add that key to the ~/.ssh/authorized_keys file of your new git user.	3.2.1 Create a new bare repository
					a. git clone --bare my_project my_project.git
				3.2.2 Putting the Bare Respository on a Server
					a. scp -r my_project.git user@git.com:/srv/git
					b. git clone user@git.com:/srv/git/my_project.git
					c. git init --bare --shared: Git will automatically add group write permissions to a repository properly
					d. To collaborate with a couple of people on a private project, all you need is an SSH server and a bare repository
				3.2.3 Small Setups
					a. Add users and set temporary passwords for every one
					b. create a single git user on the mechine and ask every user who is to have write access to send you an SSH public key and add that key to the ~/.ssh/authorized_keys file of your new git user.
	3.3 
